@using System.Collections.Generic
@using Microsoft.JSInterop
@using LemonSqueezy.Models.Mofos
@using LemonSqueezy.Components.Shared
@inject IJSRuntime IJSRuntime

<LemonSqueezyTable TItem="MofoTasking" Items="MofoTaskings" SearchRow="IsRowDisplayed"
               IsSearchable="IsSearchable" IsSortable="IsSortable" IsPaginated="IsPaginated" PageLength="PageLength" class="table table-hover">
    <TableHeader>
        <SortableTableHeader TItem="MofoTasking" TItem2="string" GetSortableProperty="(tasking) => tasking.Name">
            <HeaderContent>Name</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="MofoTasking" TItem2="string" GetSortableProperty="(tasking) => tasking.Mofo.Name">
            <HeaderContent>Mofo</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="MofoTasking" TItem2="string" GetSortableProperty="(tasking) => tasking.MofoTask.Name">
            <HeaderContent>Task</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="MofoTasking" TItem2="MofoTaskingStatus" GetSortableProperty="(tasking) => tasking.Status">
            <HeaderContent>Status</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="MofoTasking" TItem2="string" GetSortableProperty="(tasking) => tasking.MofoCommand.User.UserName">
            <HeaderContent>UserName</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="MofoTasking" TItem2="string" GetSortableProperty="(tasking) => tasking.MofoCommand.Command">
            <HeaderContent>Command</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="MofoTasking" TItem2="DateTime" GetSortableProperty="(tasking) => tasking.MofoCommand.CommandTime">
            <HeaderContent>CommandTime</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="MofoTasking" TItem2="DateTime" GetSortableProperty="(tasking) => tasking.CompletionTime">
            <HeaderContent>CompletionTime</HeaderContent>
        </SortableTableHeader>
    </TableHeader>
    <TableRow Context="tasking">
        <tr>
            <td>
                <a href="/mofotasking/edit/@tasking.Id">
                    @tasking.Name
                </a>
            </td>
            <td>
                <a href="/mofo/interact/@tasking.MofoId">
                    @tasking.Mofo.Name
                </a>
            </td>
            <td>
                <a href="/mofotask/edit/@tasking.MofoTaskId">
                    @tasking.MofoTask.Name
                </a>
            </td>
            <td>@tasking.Status</td>
            <td>
                <a href="/covenantuser/edit/@tasking.MofoCommand.User.Id">
                    @tasking.MofoCommand.User.UserName
                </a>
            </td>
            <td>@tasking.MofoCommand.Command</td>
            <td>@tasking.MofoCommand.CommandTime</td>
            <td>@tasking.CompletionTime</td>
        </tr>
    </TableRow>
</LemonSqueezyTable>

@code {
    [Parameter]
    public List<MofoTasking> MofoTaskings { get; set; }

    [Parameter]
    public EventCallback<List<MofoTasking>> MofoTaskingsChanged { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = true;

    [Parameter]
    public bool IsSortable { get; set; } = true;

    [Parameter]
    public bool IsPaginated { get; set; } = true;

    [Parameter]
    public int PageLength { get; set; } = 50;

    private void OnMofoTaskingsChanged(List<MofoTasking> MofoTaskings)
    {
        this.MofoTaskings = MofoTaskings;
        this.MofoTaskingsChanged.InvokeAsync(MofoTaskings);
    }

    private bool IsRowDisplayed(MofoTasking tasking, string SearchTerm)
    {
        return SearchTerm == string.Empty ||
            tasking.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            tasking.Mofo.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            tasking.MofoTask.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            tasking.Status.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            tasking.MofoCommand.User.UserName.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            tasking.MofoCommand.Command.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            tasking.MofoCommand.CommandTime.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            tasking.CompletionTime.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            (tasking.MofoCommand.CommandOutput != null && tasking.MofoCommand.CommandOutput.Output.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));
    }
}