@inherits OwningComponentBase<ILemonSqueezyService>

@using System.Collections.Generic
@using Microsoft.JSInterop

@using LemonSqueezy.Core
@using LemonSqueezy.Models.Mofos
@using LemonSqueezy.Components.Shared
@inject IJSRuntime IJSRuntime
@inject INotificationService INotificationService

<LemonSqueezyTable TItem="Mofo" Items="Mofos" ItemsChanged="MofosChanged" SearchRow="IsRowDisplayed"
               IsSearchable="IsSearchable" IsSortable="IsSortable" IsPaginated="IsPaginated" PageLength="PageLength" class="table table-hover">
    <TableHeader>
        @if (this.OnSelectTerminal.HasDelegate)
        {
            <th class="pl-1 pr-1">
                <div class="secondary-color">
                    <span class="fe fe-terminal"></span>
                </div>
            </th>
        }
        <SortableTableHeader TItem="Mofo" TItem2="string" GetSortableProperty="(mofo) => mofo.Name">
            <HeaderContent>Name</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Mofo" TItem2="string" GetSortableProperty="(mofo) => mofo.Hostname">
            <HeaderContent>Hostname</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Mofo" TItem2="string" GetSortableProperty="(mofo) => mofo.UserName">
            <HeaderContent>User</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Mofo" TItem2="IntegrityLevel" GetSortableProperty="(mofo) => mofo.Integrity">
            <HeaderContent>Integrity</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Mofo" TItem2="DateTime" GetSortableProperty="(mofo) => mofo.LastCheckIn">
            <HeaderContent>LastCheckIn</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Mofo" TItem2="MofoStatus" GetSortableProperty="(mofo) => mofo.Status">
            <HeaderContent>Status</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Mofo" TItem2="string" GetSortableProperty="(mofo) => mofo.Note">
            <HeaderContent>Note</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="Mofo" TItem2="string" GetSortableProperty="(mofo) => mofo.ImplantTemplate?.Name">
            <HeaderContent>Template</HeaderContent>
        </SortableTableHeader>
    </TableHeader>
    <TableRow Context="mofo">
        <tr style="opacity: @GetMofoStatusOpacity(mofo.Status)">
            @if (this.OnSelectTerminal.HasDelegate)
            {
                <td @attributes="InputAttributes">
                    <div class="secondary-color secondary-highlight-hover secondary-shadow" @onclick="e => OnSelectTerminal.InvokeAsync(mofo)">
                        <span class="fe fe-terminal"></span>
                    </div>
                </td>
            }
            <td @attributes="InputAttributes">
                <a href="/mofo/interact/@mofo.Id">
                    @mofo.Name
                </a>
            </td>
            <td @attributes="InputAttributes">@mofo.Hostname</td>
            <td @attributes="InputAttributes">@mofo.UserName</td>
            <td @attributes="InputAttributes">@mofo.Integrity</td>
            <td @attributes="InputAttributes">@mofo.LastCheckIn</td>
            <td @attributes="InputAttributes">@mofo.Status</td>
            <td @attributes="InputAttributes">@mofo.Note</td>
            <td @attributes="InputAttributes">@mofo.ImplantTemplate?.Name</td>
        </tr>
    </TableRow>
    <ButtonTray>@ButtonTray</ButtonTray>
</LemonSqueezyTable>

@code {
    [Parameter]
    public List<Mofo> Mofos { get; set; }

    [Parameter]
    public EventCallback<List<Mofo>> MofosChanged { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = false;

    [Parameter]
    public bool IsSortable { get; set; } = true;

    [Parameter]
    public bool IsPaginated { get; set; } = true;

    [Parameter]
    public int PageLength { get; set; } = 50;

    [Parameter]
    public EventCallback<Mofo> OnSelectTerminal { get; set; }

    [Parameter]
    public RenderFragment ButtonTray { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    protected async override Task OnInitializedAsync()
    {
        this.Mofos = this.Mofos ?? (await Service.GetMofos()).ToList();
        Service.DisposeContext();
    }

    private string GetMofoStatusOpacity(MofoStatus s)
    {
        return s == MofoStatus.Active ? "1.0" : "0.3";
    }

    private void OnMofosChanged(List<Mofo> Mofos)
    {
        this.Mofos = Mofos;
        this.MofosChanged.InvokeAsync(Mofos);
    }

    private bool IsRowDisplayed(Mofo mofo, string SearchTerm)
    {
        return SearchTerm == string.Empty ||
            mofo.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            (mofo.ImplantTemplate != null && mofo.ImplantTemplate.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase)) ||
            mofo.Hostname.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            mofo.UserName.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            mofo.Status.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            mofo.LastCheckIn.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            mofo.Integrity.ToString().Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            mofo.OperatingSystem.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            mofo.Process.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase);
    }
}