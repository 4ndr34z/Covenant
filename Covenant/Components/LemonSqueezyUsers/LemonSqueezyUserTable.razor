@inherits OwningComponentBase<ILemonSqueezyService>

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization

@using LemonSqueezy.Core
@using LemonSqueezy.Models.LemonSqueezy
@using LemonSqueezy.Components.Shared
@inject IJSRuntime IJSRuntime

<LemonSqueezyTable TItem="LemonSqueezyUser" Items="LemonSqueezyUsers.ToList()" SearchRow="IsRowDisplayed"
               IsSearchable="IsSearchable" IsSortable="IsSortable" IsPaginated="IsPaginated" PageLength="PageLength" class="table table-hover">
    <TableHeader>
        <SortableTableHeader TItem="LemonSqueezyUser" TItem2="string" GetSortableProperty="(user) => user.UserName">
            <HeaderContent>UserName</HeaderContent>
        </SortableTableHeader>
        <SortableTableHeader TItem="LemonSqueezyUser" TItem2="string" GetSortableProperty="(user) => string.Join(',', GetRoles(user))">
            <HeaderContent>Roles</HeaderContent>
        </SortableTableHeader>
    </TableHeader>
    <TableRow Context="user">
        @{
            IEnumerable<string> roles = GetRoles(user);
            IEnumerable<string> currentUserRoles = GetRoles(this.CurrentUser);
        }
        @if ((!roles.Contains("Listener") && !roles.Contains("ServiceUser")) || roles.Contains("User"))
        {
            <tr>
                <td>
                    @if (currentUserRoles.Contains("Administrator") || user.UserName == this.CurrentUser.UserName)
                    {
                        <a href="/covenantuser/edit/@user.Id">
                            @user.UserName
                        </a>
                    }
                    else
                    {
                        @user.UserName
                    }
                </td>
                <td>@string.Join(", ", roles)</td>
            </tr>
        }
    </TableRow>
</LemonSqueezyTable>

@code {
    [Parameter]
    public IEnumerable<LemonSqueezyUser> LemonSqueezyUsers { get; set; }

    [Parameter]
    public bool IsSearchable { get; set; } = false;

    [Parameter]
    public bool IsSortable { get; set; } = true;

    [Parameter]
    public bool IsPaginated { get; set; } = false;

    [Parameter]
    public int PageLength { get; set; } = 50;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationState { get; set; }
    private LemonSqueezyUser CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.CurrentUser = this.CurrentUser ?? await Service.GetCurrentUser((await AuthenticationState).User);
        Service.DisposeContext();
    }

    private IEnumerable<string> GetRoles(LemonSqueezyUser user)
    {
        try
        {
            IEnumerable<IdentityUserRole<string>> userRoles = Service.GetUserRoles().WaitResult();
            return userRoles.Where(UR => UR.UserId == user.Id)
                .Select(UR =>
                {
                    return Service.GetRole(UR.RoleId).WaitResult().Name;
                }).ToList();
        }
        catch (Exception e) when (e is ControllerNotFoundException || e is ControllerBadRequestException || e is ControllerUnauthorizedException)
        {
            return new List<string>();
        }
    }

    private bool IsRowDisplayed(LemonSqueezyUser user, string SearchTerm)
    {
        return SearchTerm == string.Empty ||
            user.UserName.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
            string.Join(',', GetRoles(user)).Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase);
    }
}