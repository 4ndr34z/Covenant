@using Microsoft.AspNetCore.Components.Forms
@using LemonSqueezy.Models.LemonSqueezy

<EditForm Model="LemonSqueezyUserRegister" OnValidSubmit="OnFormSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="UserName">UserName</label>
        <input id="UserName" name="UserName" @bind="LemonSqueezyUserRegister.UserName" class="form-control" @attributes="InputAttributes">
        <div class="text-danger"><ValidationMessage For="() => LemonSqueezyUserRegister.UserName" /></div>
    </div>
    <div class="form-group">
        <label for="Password">Password</label>
        <input type="password" id="Password" name="Password" @bind="LemonSqueezyUserRegister.Password" class="form-control" disabled="@Disabled">
        <div class="text-danger"><ValidationMessage For="() => LemonSqueezyUserRegister.Password" /></div>
    </div>
    <div class="form-group">
        <label for="ConfirmPassword">Confirm Password</label>
        <input type="password" id="ConfirmPassword" name="ConfirmPassword" @bind="LemonSqueezyUserRegister.ConfirmPassword" class="form-control" disabled="@Disabled">
        <div class="text-danger"><ValidationMessage For="() => LemonSqueezyUserRegister.ConfirmPassword" /></div>
    </div>
    <button type="submit" class="btn btn-primary" disabled="@Disabled">
        @ChildContent
    </button>
</EditForm>

@code {
    [Parameter]
    public LemonSqueezyUserRegister LemonSqueezyUserRegister { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<LemonSqueezyUserRegister> OnSubmit { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }

    private async Task OnFormSubmit()
    {
        await this.OnSubmit.InvokeAsync(this.LemonSqueezyUserRegister);
    }
}