@page "/"
@page "/home"
@page "/home/index"
@attribute [Authorize(Roles = "User, Administrator")]
@inherits OwningComponentBase<ILemonSqueezyService>
@implements IDisposable

@using LemonSqueezy.Core
@using LemonSqueezy.Models.Mofos
@using LemonSqueezy.Models.Listeners
@using LemonSqueezy.Components.Listeners
@using LemonSqueezy.Components.Mofos
@using LemonSqueezy.Components.MofoTaskings
@inject INotificationService INotificationService

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3">
    <h1 class="h2">Dashboard</h1>
</div>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center">
    <h4 class="h5">Mofos</h4>
</div>
<MofoTable @bind-Mofos="Mofos" IsPaginated="true" PageLength="10" IsSearchable="false" />
<br />

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center">
    <h4 class="h5">Listeners</h4>
</div>
<ListenerTable @bind-Listeners="Listeners" IsPaginated="true" PageLength="5" IsSearchable="false" />
<br />

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center">
    <h4 class="h5">Taskings</h4>
</div>
<MofoTaskingTable @bind-MofoTaskings="MofoTaskings" IsPaginated="true" PageLength="10" IsSearchable="false" />
<br />

@code {
    [Parameter]
    public List<Mofo> Mofos { get; set; }

    [Parameter]
    public List<Listener> Listeners { get; set; }

    [Parameter]
    public List<MofoTasking> MofoTaskings { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.Mofos = this.Mofos ?? (await Service.GetMofos())
            .Where(G => G.Status != MofoStatus.Hidden && G.Status != MofoStatus.Uninitialized)
            .OrderByDescending(G => G.LastCheckIn)
            .ToList();
        this.Listeners = this.Listeners ?? (await Service.GetListeners()).ToList();
        this.MofoTaskings = this.MofoTaskings ?? (await Service.GetMofoTaskings()).ToList();
        this.INotificationService.OnCreateMofo += OnCreateMofo;
        this.INotificationService.OnEditMofo += OnEditMofo;
        this.INotificationService.OnCreateListener += OnCreateListener;
        this.INotificationService.OnEditListener += OnEditListener;
        this.INotificationService.OnCreateMofoTasking += OnCreateMofoTasking;
        this.INotificationService.OnEditMofoTasking += OnEditMofoTasking;
    }

    public void Dispose()
    {
        this.INotificationService.OnCreateMofo -= OnCreateMofo;
        this.INotificationService.OnEditMofo -= OnEditMofo;
        this.INotificationService.OnCreateListener -= OnCreateListener;
        this.INotificationService.OnEditListener -= OnEditListener;
        this.INotificationService.OnCreateMofoTasking -= OnCreateMofoTasking;
        this.INotificationService.OnEditMofoTasking -= OnEditMofoTasking;
    }

    private void OnCreateMofo(object sender, Mofo mofo)
    {
        this.Mofos.Add(mofo);
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnEditMofo(object sender, Mofo mofo)
    {
        if (this.Mofos.Any(G => G.Id == mofo.Id))
        {
            this.Mofos[this.Mofos.FindIndex(G => G.Id == mofo.Id)] = mofo;
            this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private void OnCreateListener(object sender, Listener listener)
    {
        this.Listeners.Add(listener);
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnEditListener(object sender, Listener listener)
    {
        if (this.Listeners.Any(L => L.Id == listener.Id))
        {
            this.Listeners[this.Listeners.FindIndex(L => L.Id == listener.Id)] = listener;
            this.InvokeAsync(() => this.StateHasChanged());
        }
    }

    private void OnCreateMofoTasking(object sender, MofoTasking tasking)
    {
        this.MofoTaskings.Add(tasking);
        this.InvokeAsync(() => this.StateHasChanged());
    }

    private void OnEditMofoTasking(object sender, MofoTasking tasking)
    {
        if (this.MofoTaskings.Any(T => T.Id == tasking.Id))
        {
            this.MofoTaskings[this.MofoTaskings.FindIndex(T => T.Id == tasking.Id)] = tasking;
            this.InvokeAsync(() => this.StateHasChanged());
        }
    }
}
