// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace LemonSqueezy.API
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LemonSqueezyAPI.
    /// </summary>
    public static partial class LemonSqueezyAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CommandOutput> GetCommandOutputs(this ILemonSqueezyAPI operations)
            {
                return operations.GetCommandOutputsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CommandOutput>> GetCommandOutputsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommandOutputsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CommandOutput CreateCommandOutput(this ILemonSqueezyAPI operations, CommandOutput body = default(CommandOutput))
            {
                return operations.CreateCommandOutputAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommandOutput> CreateCommandOutputAsync(this ILemonSqueezyAPI operations, CommandOutput body = default(CommandOutput), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCommandOutputWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CommandOutput EditCommandOutput(this ILemonSqueezyAPI operations, CommandOutput body = default(CommandOutput))
            {
                return operations.EditCommandOutputAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommandOutput> EditCommandOutputAsync(this ILemonSqueezyAPI operations, CommandOutput body = default(CommandOutput), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCommandOutputWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CommandOutput GetCommandOutput(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetCommandOutputAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CommandOutput> GetCommandOutputAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCommandOutputWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteCommandOutput(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteCommandOutputAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCommandOutputAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCommandOutputWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void AppendCommandOutput(this ILemonSqueezyAPI operations, int id, string body = default(string))
            {
                operations.AppendCommandOutputAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AppendCommandOutputAsync(this ILemonSqueezyAPI operations, int id, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.AppendCommandOutputWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<LemonSqueezyUser> GetUsers(this ILemonSqueezyAPI operations)
            {
                return operations.GetUsersAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<LemonSqueezyUser>> GetUsersAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static LemonSqueezyUser CreateUser(this ILemonSqueezyAPI operations, LemonSqueezyUserRegister body = default(LemonSqueezyUserRegister))
            {
                return operations.CreateUserAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LemonSqueezyUser> CreateUserAsync(this ILemonSqueezyAPI operations, LemonSqueezyUserRegister body = default(LemonSqueezyUserRegister), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static LemonSqueezyUser EditUser(this ILemonSqueezyAPI operations, LemonSqueezyUser body = default(LemonSqueezyUser))
            {
                return operations.EditUserAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LemonSqueezyUser> EditUserAsync(this ILemonSqueezyAPI operations, LemonSqueezyUser body = default(LemonSqueezyUser), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditUserWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static LemonSqueezyUser GetUser(this ILemonSqueezyAPI operations, string id)
            {
                return operations.GetUserAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LemonSqueezyUser> GetUserAsync(this ILemonSqueezyAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteUser(this ILemonSqueezyAPI operations, string id)
            {
                operations.DeleteUserAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserAsync(this ILemonSqueezyAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static LemonSqueezyUser GetCurrentUser(this ILemonSqueezyAPI operations)
            {
                return operations.GetCurrentUserAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LemonSqueezyUser> GetCurrentUserAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCurrentUserWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static LemonSqueezyUserLoginResult Login(this ILemonSqueezyAPI operations, LemonSqueezyUserLogin body = default(LemonSqueezyUserLogin))
            {
                return operations.LoginAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LemonSqueezyUserLoginResult> LoginAsync(this ILemonSqueezyAPI operations, LemonSqueezyUserLogin body = default(LemonSqueezyUserLogin), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static LemonSqueezyUser EditUserPassword(this ILemonSqueezyAPI operations, LemonSqueezyUserLogin body = default(LemonSqueezyUserLogin))
            {
                return operations.EditUserPasswordAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LemonSqueezyUser> EditUserPasswordAsync(this ILemonSqueezyAPI operations, LemonSqueezyUserLogin body = default(LemonSqueezyUserLogin), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditUserPasswordWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<StringIdentityUserRole> GetUsersRoles(this ILemonSqueezyAPI operations)
            {
                return operations.GetUsersRolesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StringIdentityUserRole>> GetUsersRolesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsersRolesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<StringIdentityUserRole> GetUserRoles(this ILemonSqueezyAPI operations, string id)
            {
                return operations.GetUserRolesAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StringIdentityUserRole>> GetUserRolesAsync(this ILemonSqueezyAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserRolesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static StringIdentityUserRole GetUserRole(this ILemonSqueezyAPI operations, string id, string rid)
            {
                return operations.GetUserRoleAsync(id, rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringIdentityUserRole> GetUserRoleAsync(this ILemonSqueezyAPI operations, string id, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUserRoleWithHttpMessagesAsync(id, rid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static StringIdentityUserRole CreateUserRole(this ILemonSqueezyAPI operations, string id, string rid)
            {
                return operations.CreateUserRoleAsync(id, rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringIdentityUserRole> CreateUserRoleAsync(this ILemonSqueezyAPI operations, string id, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateUserRoleWithHttpMessagesAsync(id, rid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static void DeleteUserRole(this ILemonSqueezyAPI operations, string id, string rid)
            {
                operations.DeleteUserRoleAsync(id, rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteUserRoleAsync(this ILemonSqueezyAPI operations, string id, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteUserRoleWithHttpMessagesAsync(id, rid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<IdentityRole> GetRoles(this ILemonSqueezyAPI operations)
            {
                return operations.GetRolesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<IdentityRole>> GetRolesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRolesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rid'>
            /// </param>
            public static IdentityRole GetRole(this ILemonSqueezyAPI operations, string rid)
            {
                return operations.GetRoleAsync(rid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='rid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IdentityRole> GetRoleAsync(this ILemonSqueezyAPI operations, string rid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoleWithHttpMessagesAsync(rid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedCredential> GetCredentials(this ILemonSqueezyAPI operations)
            {
                return operations.GetCredentialsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedCredential>> GetCredentialsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedPasswordCredential> GetPasswordCredentials(this ILemonSqueezyAPI operations)
            {
                return operations.GetPasswordCredentialsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedPasswordCredential>> GetPasswordCredentialsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPasswordCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedPasswordCredential CreatePasswordCredential(this ILemonSqueezyAPI operations, CapturedPasswordCredential body = default(CapturedPasswordCredential))
            {
                return operations.CreatePasswordCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedPasswordCredential> CreatePasswordCredentialAsync(this ILemonSqueezyAPI operations, CapturedPasswordCredential body = default(CapturedPasswordCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePasswordCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedPasswordCredential EditPasswordCredential(this ILemonSqueezyAPI operations, CapturedPasswordCredential body = default(CapturedPasswordCredential))
            {
                return operations.EditPasswordCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedPasswordCredential> EditPasswordCredentialAsync(this ILemonSqueezyAPI operations, CapturedPasswordCredential body = default(CapturedPasswordCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditPasswordCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedHashCredential> GetHashCredentials(this ILemonSqueezyAPI operations)
            {
                return operations.GetHashCredentialsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedHashCredential>> GetHashCredentialsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHashCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedHashCredential CreateHashCredential(this ILemonSqueezyAPI operations, CapturedHashCredential body = default(CapturedHashCredential))
            {
                return operations.CreateHashCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedHashCredential> CreateHashCredentialAsync(this ILemonSqueezyAPI operations, CapturedHashCredential body = default(CapturedHashCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateHashCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedHashCredential EditHashCredential(this ILemonSqueezyAPI operations, CapturedHashCredential body = default(CapturedHashCredential))
            {
                return operations.EditHashCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedHashCredential> EditHashCredentialAsync(this ILemonSqueezyAPI operations, CapturedHashCredential body = default(CapturedHashCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditHashCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CapturedTicketCredential> GetTicketCredentials(this ILemonSqueezyAPI operations)
            {
                return operations.GetTicketCredentialsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CapturedTicketCredential>> GetTicketCredentialsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTicketCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedTicketCredential CreateTicketCredential(this ILemonSqueezyAPI operations, CapturedTicketCredential body = default(CapturedTicketCredential))
            {
                return operations.CreateTicketCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedTicketCredential> CreateTicketCredentialAsync(this ILemonSqueezyAPI operations, CapturedTicketCredential body = default(CapturedTicketCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTicketCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CapturedTicketCredential EditTicketCredential(this ILemonSqueezyAPI operations, CapturedTicketCredential body = default(CapturedTicketCredential))
            {
                return operations.EditTicketCredentialAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedTicketCredential> EditTicketCredentialAsync(this ILemonSqueezyAPI operations, CapturedTicketCredential body = default(CapturedTicketCredential), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditTicketCredentialWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedCredential GetCredential(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedCredential> GetCredentialAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteCredential(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteCredentialAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedPasswordCredential GetPasswordCredential(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetPasswordCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedPasswordCredential> GetPasswordCredentialAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPasswordCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedHashCredential GetHashCredential(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetHashCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedHashCredential> GetHashCredentialAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHashCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static CapturedTicketCredential GetTicketCredential(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetTicketCredentialAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CapturedTicketCredential> GetTicketCredentialAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTicketCredentialWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EmbeddedResource> GetEmbeddedResources(this ILemonSqueezyAPI operations)
            {
                return operations.GetEmbeddedResourcesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EmbeddedResource>> GetEmbeddedResourcesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmbeddedResourcesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static EmbeddedResource CreateEmbeddedResource(this ILemonSqueezyAPI operations, EmbeddedResource body = default(EmbeddedResource))
            {
                return operations.CreateEmbeddedResourceAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbeddedResource> CreateEmbeddedResourceAsync(this ILemonSqueezyAPI operations, EmbeddedResource body = default(EmbeddedResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEmbeddedResourceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static EmbeddedResource EditEmbeddedResource(this ILemonSqueezyAPI operations, EmbeddedResource body = default(EmbeddedResource))
            {
                return operations.EditEmbeddedResourceAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbeddedResource> EditEmbeddedResourceAsync(this ILemonSqueezyAPI operations, EmbeddedResource body = default(EmbeddedResource), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditEmbeddedResourceWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EmbeddedResource GetEmbeddedResource(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetEmbeddedResourceAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EmbeddedResource> GetEmbeddedResourceAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEmbeddedResourceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteEmbeddedResource(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteEmbeddedResourceAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEmbeddedResourceAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteEmbeddedResourceWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EventModel> GetEvents(this ILemonSqueezyAPI operations)
            {
                return operations.GetEventsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> GetEventsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static EventModel CreateEvent(this ILemonSqueezyAPI operations, EventModel body = default(EventModel))
            {
                return operations.CreateEventAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> CreateEventAsync(this ILemonSqueezyAPI operations, EventModel body = default(EventModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateEventWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EventModel GetEvent(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetEventAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> GetEventAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static long? GetEventTime(this ILemonSqueezyAPI operations)
            {
                return operations.GetEventTimeAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<long?> GetEventTimeAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventTimeWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            public static IList<EventModel> GetEventsAfter(this ILemonSqueezyAPI operations, long fromdate)
            {
                return operations.GetEventsAfterAsync(fromdate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> GetEventsAfterAsync(this ILemonSqueezyAPI operations, long fromdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsAfterWithHttpMessagesAsync(fromdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            /// <param name='todate'>
            /// </param>
            public static IList<EventModel> GetEventsRange(this ILemonSqueezyAPI operations, long fromdate, long todate)
            {
                return operations.GetEventsRangeAsync(fromdate, todate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fromdate'>
            /// </param>
            /// <param name='todate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EventModel>> GetEventsRangeAsync(this ILemonSqueezyAPI operations, long fromdate, long todate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEventsRangeWithHttpMessagesAsync(fromdate, todate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static DownloadEvent GetDownloadEvent(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetDownloadEventAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DownloadEvent> GetDownloadEventAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDownloadEventWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static string GetDownloadContent(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetDownloadContentAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetDownloadContentAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDownloadContentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static EventModel CreateDownloadEvent(this ILemonSqueezyAPI operations, DownloadEvent body = default(DownloadEvent))
            {
                return operations.CreateDownloadEventAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EventModel> CreateDownloadEventAsync(this ILemonSqueezyAPI operations, DownloadEvent body = default(DownloadEvent), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDownloadEventWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Mofo> GetMofos(this ILemonSqueezyAPI operations)
            {
                return operations.GetMofosAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Mofo>> GetMofosAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofosWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Mofo CreateMofo(this ILemonSqueezyAPI operations, Mofo body = default(Mofo))
            {
                return operations.CreateMofoAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Mofo> CreateMofoAsync(this ILemonSqueezyAPI operations, Mofo body = default(Mofo), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMofoWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Mofo EditMofo(this ILemonSqueezyAPI operations, Mofo body = default(Mofo))
            {
                return operations.EditMofoAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Mofo> EditMofoAsync(this ILemonSqueezyAPI operations, Mofo body = default(Mofo), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditMofoWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Mofo GetMofo(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetMofoAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Mofo> GetMofoAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteMofo(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteMofoAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMofoAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMofoWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static Mofo GetMofoByName(this ILemonSqueezyAPI operations, string name)
            {
                return operations.GetMofoByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Mofo> GetMofoByNameAsync(this ILemonSqueezyAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='someid'>
            /// </param>
            public static Mofo GetMofoBySOMEID(this ILemonSqueezyAPI operations, string someid)
            {
                return operations.GetMofoBySOMEIDAsync(someid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='someid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Mofo> GetMofoBySOMEIDAsync(this ILemonSqueezyAPI operations, string someid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoBySOMEIDWithHttpMessagesAsync(someid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serversomeid'>
            /// </param>
            public static Mofo GetMofoByOriginalServerSOMEID(this ILemonSqueezyAPI operations, string serversomeid)
            {
                return operations.GetMofoByOriginalServerSOMEIDAsync(serversomeid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='serversomeid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Mofo> GetMofoByOriginalServerSOMEIDAsync(this ILemonSqueezyAPI operations, string serversomeid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoByOriginalServerSOMEIDWithHttpMessagesAsync(serversomeid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cid'>
            /// </param>
            public static IList<string> GetPathToChildMofo(this ILemonSqueezyAPI operations, int id, int cid)
            {
                return operations.GetPathToChildMofoAsync(id, cid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetPathToChildMofoAsync(this ILemonSqueezyAPI operations, int id, int cid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPathToChildMofoWithHttpMessagesAsync(id, cid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Mofo GetOutboundMofo(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetOutboundMofoAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Mofo> GetOutboundMofoAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOutboundMofoWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MofoCommand InteractMofo(this ILemonSqueezyAPI operations, int id, string body = default(string))
            {
                return operations.InteractMofoAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoCommand> InteractMofoAsync(this ILemonSqueezyAPI operations, int id, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InteractMofoWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static byte[] CompileMofoExecutor(this ILemonSqueezyAPI operations, int id)
            {
                return operations.CompileMofoExecutorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<byte[]> CompileMofoExecutorAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CompileMofoExecutorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MofoCommand> GetMofoCommands(this ILemonSqueezyAPI operations)
            {
                return operations.GetMofoCommandsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MofoCommand>> GetMofoCommandsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoCommandsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MofoCommand CreateMofoCommand(this ILemonSqueezyAPI operations, MofoCommand body = default(MofoCommand))
            {
                return operations.CreateMofoCommandAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoCommand> CreateMofoCommandAsync(this ILemonSqueezyAPI operations, MofoCommand body = default(MofoCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMofoCommandWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MofoCommand EditMofoCommand(this ILemonSqueezyAPI operations, MofoCommand body = default(MofoCommand))
            {
                return operations.EditMofoCommandAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoCommand> EditMofoCommandAsync(this ILemonSqueezyAPI operations, MofoCommand body = default(MofoCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditMofoCommandWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static MofoCommand GetMofoCommand(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetMofoCommandAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoCommand> GetMofoCommandAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoCommandWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteMofoCommand(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteMofoCommandAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMofoCommandAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMofoCommandWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MofoTask> GetMofoTasks(this ILemonSqueezyAPI operations)
            {
                return operations.GetMofoTasksAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MofoTask>> GetMofoTasksAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoTasksWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MofoTask CreateMofoTask(this ILemonSqueezyAPI operations, MofoTask body = default(MofoTask))
            {
                return operations.CreateMofoTaskAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoTask> CreateMofoTaskAsync(this ILemonSqueezyAPI operations, MofoTask body = default(MofoTask), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMofoTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MofoTask EditMofoTask(this ILemonSqueezyAPI operations, MofoTask body = default(MofoTask))
            {
                return operations.EditMofoTaskAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoTask> EditMofoTaskAsync(this ILemonSqueezyAPI operations, MofoTask body = default(MofoTask), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditMofoTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static MofoTask GetMofoTask(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetMofoTaskAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoTask> GetMofoTaskAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoTaskWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteMofoTask(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteMofoTaskAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMofoTaskAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMofoTaskWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<MofoTasking> GetAllMofoTaskings(this ILemonSqueezyAPI operations)
            {
                return operations.GetAllMofoTaskingsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MofoTasking>> GetAllMofoTaskingsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllMofoTaskingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MofoTasking CreateMofoTasking(this ILemonSqueezyAPI operations, MofoTasking body = default(MofoTasking))
            {
                return operations.CreateMofoTaskingAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoTasking> CreateMofoTaskingAsync(this ILemonSqueezyAPI operations, MofoTasking body = default(MofoTasking), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMofoTaskingWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MofoTasking EditMofoTasking(this ILemonSqueezyAPI operations, MofoTasking body = default(MofoTasking))
            {
                return operations.EditMofoTaskingAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoTasking> EditMofoTaskingAsync(this ILemonSqueezyAPI operations, MofoTasking body = default(MofoTasking), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditMofoTaskingWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<MofoTasking> GetMofoTaskings(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetMofoTaskingsAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MofoTasking>> GetMofoTaskingsAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoTaskingsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<MofoTasking> GetSearchMofoTaskings(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetSearchMofoTaskingsAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MofoTasking>> GetSearchMofoTaskingsAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchMofoTaskingsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<MofoTasking> GetUninitializedMofoTaskings(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetUninitializedMofoTaskingsAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MofoTasking>> GetUninitializedMofoTaskingsAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUninitializedMofoTaskingsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<MofoTasking> GetSearchUninitializedMofoTaskings(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetSearchUninitializedMofoTaskingsAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MofoTasking>> GetSearchUninitializedMofoTaskingsAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchUninitializedMofoTaskingsWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            public static MofoTasking GetMofoTasking(this ILemonSqueezyAPI operations, int tid)
            {
                return operations.GetMofoTaskingAsync(tid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoTasking> GetMofoTaskingAsync(this ILemonSqueezyAPI operations, int tid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoTaskingWithHttpMessagesAsync(tid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            public static void DeleteMofoTasking(this ILemonSqueezyAPI operations, int tid)
            {
                operations.DeleteMofoTaskingAsync(tid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMofoTaskingAsync(this ILemonSqueezyAPI operations, int tid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteMofoTaskingWithHttpMessagesAsync(tid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskingname'>
            /// </param>
            public static MofoTasking GetMofoTaskingByName(this ILemonSqueezyAPI operations, string taskingname)
            {
                return operations.GetMofoTaskingByNameAsync(taskingname).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taskingname'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MofoTasking> GetMofoTaskingByNameAsync(this ILemonSqueezyAPI operations, string taskingname, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMofoTaskingByNameWithHttpMessagesAsync(taskingname, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ImplantTemplate> GetImplantTemplates(this ILemonSqueezyAPI operations)
            {
                return operations.GetImplantTemplatesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ImplantTemplate>> GetImplantTemplatesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImplantTemplatesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ImplantTemplate CreateImplantTemplate(this ILemonSqueezyAPI operations, ImplantTemplate body = default(ImplantTemplate))
            {
                return operations.CreateImplantTemplateAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> CreateImplantTemplateAsync(this ILemonSqueezyAPI operations, ImplantTemplate body = default(ImplantTemplate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateImplantTemplateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ImplantTemplate EditImplantTemplate(this ILemonSqueezyAPI operations, ImplantTemplate body = default(ImplantTemplate))
            {
                return operations.EditImplantTemplateAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> EditImplantTemplateAsync(this ILemonSqueezyAPI operations, ImplantTemplate body = default(ImplantTemplate), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditImplantTemplateWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ImplantTemplate GetImplantTemplate(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetImplantTemplateAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> GetImplantTemplateAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImplantTemplateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteImplantTemplate(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteImplantTemplateAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteImplantTemplateAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteImplantTemplateWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static ImplantTemplate GetImplantTemplateByName(this ILemonSqueezyAPI operations, string name)
            {
                return operations.GetImplantTemplateByNameAsync(name).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImplantTemplate> GetImplantTemplateByNameAsync(this ILemonSqueezyAPI operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImplantTemplateByNameWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetReport(this ILemonSqueezyAPI operations)
            {
                return operations.GetReportAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetReportAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReportWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Indicator> GetIndicators(this ILemonSqueezyAPI operations)
            {
                return operations.GetIndicatorsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Indicator>> GetIndicatorsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIndicatorsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Indicator CreateIndicator(this ILemonSqueezyAPI operations, Indicator body = default(Indicator))
            {
                return operations.CreateIndicatorAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Indicator> CreateIndicatorAsync(this ILemonSqueezyAPI operations, Indicator body = default(Indicator), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateIndicatorWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Indicator EditIndicator(this ILemonSqueezyAPI operations, Indicator body = default(Indicator))
            {
                return operations.EditIndicatorAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Indicator> EditIndicatorAsync(this ILemonSqueezyAPI operations, Indicator body = default(Indicator), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditIndicatorWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<FileIndicator> GetFileIndicators(this ILemonSqueezyAPI operations)
            {
                return operations.GetFileIndicatorsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FileIndicator>> GetFileIndicatorsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileIndicatorsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<NetworkIndicator> GetNetworkIndicators(this ILemonSqueezyAPI operations)
            {
                return operations.GetNetworkIndicatorsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<NetworkIndicator>> GetNetworkIndicatorsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkIndicatorsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<TargetIndicator> GetTargetIndicators(this ILemonSqueezyAPI operations)
            {
                return operations.GetTargetIndicatorsAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TargetIndicator>> GetTargetIndicatorsAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTargetIndicatorsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Indicator GetIndicator(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Indicator> GetIndicatorAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteIndicator(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteIndicatorAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static FileIndicator GetFileIndicator(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetFileIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileIndicator> GetFileIndicatorAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static NetworkIndicator GetNetworkIndicator(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetNetworkIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkIndicator> GetNetworkIndicatorAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNetworkIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TargetIndicator GetTargetIndicator(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetTargetIndicatorAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TargetIndicator> GetTargetIndicatorAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTargetIndicatorWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Launcher> GetLaunchers(this ILemonSqueezyAPI operations)
            {
                return operations.GetLaunchersAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Launcher>> GetLaunchersAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLaunchersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BinaryLauncher GetBinaryLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GetBinaryLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> GetBinaryLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBinaryLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static BinaryLauncher GenerateBinaryLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GenerateBinaryLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> GenerateBinaryLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateBinaryLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static BinaryLauncher EditBinaryLauncher(this ILemonSqueezyAPI operations, BinaryLauncher body = default(BinaryLauncher))
            {
                return operations.EditBinaryLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> EditBinaryLauncherAsync(this ILemonSqueezyAPI operations, BinaryLauncher body = default(BinaryLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditBinaryLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static BinaryLauncher GenerateBinaryHostedLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateBinaryHostedLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BinaryLauncher> GenerateBinaryHostedLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateBinaryHostedLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ShellCodeLauncher GetShellCodeLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GetShellCodeLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShellCodeLauncher> GetShellCodeLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShellCodeLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static ShellCodeLauncher GenerateShellCodeLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GenerateShellCodeLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShellCodeLauncher> GenerateShellCodeLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateShellCodeLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ShellCodeLauncher EditShellCodeLauncher(this ILemonSqueezyAPI operations, ShellCodeLauncher body = default(ShellCodeLauncher))
            {
                return operations.EditShellCodeLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShellCodeLauncher> EditShellCodeLauncherAsync(this ILemonSqueezyAPI operations, ShellCodeLauncher body = default(ShellCodeLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditShellCodeLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ShellCodeLauncher GenerateShellCodeHostedLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateShellCodeHostedLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ShellCodeLauncher> GenerateShellCodeHostedLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateShellCodeHostedLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PowerShellLauncher GetPowerShellLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GetPowerShellLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> GetPowerShellLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPowerShellLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static PowerShellLauncher GeneratePowerShellLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GeneratePowerShellLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> GeneratePowerShellLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GeneratePowerShellLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PowerShellLauncher EditPowerShellLauncher(this ILemonSqueezyAPI operations, PowerShellLauncher body = default(PowerShellLauncher))
            {
                return operations.EditPowerShellLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> EditPowerShellLauncherAsync(this ILemonSqueezyAPI operations, PowerShellLauncher body = default(PowerShellLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditPowerShellLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PowerShellLauncher GeneratePowerShellHostedFileLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GeneratePowerShellHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PowerShellLauncher> GeneratePowerShellHostedFileLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GeneratePowerShellHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MSBuildLauncher GetMSBuildLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GetMSBuildLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> GetMSBuildLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMSBuildLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MSBuildLauncher GenerateMSBuildLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GenerateMSBuildLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> GenerateMSBuildLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateMSBuildLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MSBuildLauncher EditMSBuildLauncher(this ILemonSqueezyAPI operations, MSBuildLauncher body = default(MSBuildLauncher))
            {
                return operations.EditMSBuildLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> EditMSBuildLauncherAsync(this ILemonSqueezyAPI operations, MSBuildLauncher body = default(MSBuildLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditMSBuildLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MSBuildLauncher GenerateMSBuildHostedFileLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateMSBuildHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MSBuildLauncher> GenerateMSBuildHostedFileLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateMSBuildHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static InstallUtilLauncher GetInstallUtilLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GetInstallUtilLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> GetInstallUtilLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstallUtilLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static InstallUtilLauncher GenerateInstallUtilLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GenerateInstallUtilLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> GenerateInstallUtilLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateInstallUtilLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static InstallUtilLauncher EditInstallUtilLauncher(this ILemonSqueezyAPI operations, InstallUtilLauncher body = default(InstallUtilLauncher))
            {
                return operations.EditInstallUtilLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> EditInstallUtilLauncherAsync(this ILemonSqueezyAPI operations, InstallUtilLauncher body = default(InstallUtilLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditInstallUtilLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static InstallUtilLauncher GenerateInstallUtilHostedFileLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateInstallUtilHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InstallUtilLauncher> GenerateInstallUtilHostedFileLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateInstallUtilHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WmicLauncher GetWmicLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GetWmicLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> GetWmicLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWmicLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WmicLauncher GenerateWmicLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GenerateWmicLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> GenerateWmicLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWmicLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static WmicLauncher EditWmicLauncher(this ILemonSqueezyAPI operations, WmicLauncher body = default(WmicLauncher))
            {
                return operations.EditWmicLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> EditWmicLauncherAsync(this ILemonSqueezyAPI operations, WmicLauncher body = default(WmicLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditWmicLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static WmicLauncher GenerateWmicHostedFileLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateWmicHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WmicLauncher> GenerateWmicHostedFileLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWmicHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Regsvr32Launcher GetRegsvr32Launcher(this ILemonSqueezyAPI operations)
            {
                return operations.GetRegsvr32LauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> GetRegsvr32LauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRegsvr32LauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Regsvr32Launcher GenerateRegsvr32Launcher(this ILemonSqueezyAPI operations)
            {
                return operations.GenerateRegsvr32LauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> GenerateRegsvr32LauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateRegsvr32LauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Regsvr32Launcher EditRegsvr32Launcher(this ILemonSqueezyAPI operations, Regsvr32Launcher body = default(Regsvr32Launcher))
            {
                return operations.EditRegsvr32LauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> EditRegsvr32LauncherAsync(this ILemonSqueezyAPI operations, Regsvr32Launcher body = default(Regsvr32Launcher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditRegsvr32LauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Regsvr32Launcher GenerateRegsvr32HostedFileLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateRegsvr32HostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Regsvr32Launcher> GenerateRegsvr32HostedFileLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateRegsvr32HostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MshtaLauncher GetMshtaLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GetMshtaLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> GetMshtaLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMshtaLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MshtaLauncher GenerateMshtaLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GenerateMshtaLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> GenerateMshtaLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateMshtaLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MshtaLauncher EditMshtaLauncher(this ILemonSqueezyAPI operations, MshtaLauncher body = default(MshtaLauncher))
            {
                return operations.EditMshtaLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> EditMshtaLauncherAsync(this ILemonSqueezyAPI operations, MshtaLauncher body = default(MshtaLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditMshtaLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static MshtaLauncher GenerateMshtaHostedFileLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateMshtaHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MshtaLauncher> GenerateMshtaHostedFileLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateMshtaHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CscriptLauncher GetCscriptLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GetCscriptLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> GetCscriptLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCscriptLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CscriptLauncher GenerateCscriptLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GenerateCscriptLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> GenerateCscriptLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateCscriptLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CscriptLauncher EditCscriptLauncher(this ILemonSqueezyAPI operations, CscriptLauncher body = default(CscriptLauncher))
            {
                return operations.EditCscriptLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> EditCscriptLauncherAsync(this ILemonSqueezyAPI operations, CscriptLauncher body = default(CscriptLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditCscriptLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CscriptLauncher GenerateCscriptHostedFileLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateCscriptHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CscriptLauncher> GenerateCscriptHostedFileLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateCscriptHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WscriptLauncher GetWscriptLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GetWscriptLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> GetWscriptLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWscriptLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static WscriptLauncher GenerateWscriptLauncher(this ILemonSqueezyAPI operations)
            {
                return operations.GenerateWscriptLauncherAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> GenerateWscriptLauncherAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWscriptLauncherWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static WscriptLauncher EditWscriptLauncher(this ILemonSqueezyAPI operations, WscriptLauncher body = default(WscriptLauncher))
            {
                return operations.EditWscriptLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> EditWscriptLauncherAsync(this ILemonSqueezyAPI operations, WscriptLauncher body = default(WscriptLauncher), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditWscriptLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static WscriptLauncher GenerateWscriptHostedFileLauncher(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile))
            {
                return operations.GenerateWscriptHostedFileLauncherAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WscriptLauncher> GenerateWscriptHostedFileLauncherAsync(this ILemonSqueezyAPI operations, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateWscriptHostedFileLauncherWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ListenerType> GetListenerTypes(this ILemonSqueezyAPI operations)
            {
                return operations.GetListenerTypesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ListenerType>> GetListenerTypesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListenerTypesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ListenerType GetListenerType(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetListenerTypeAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListenerType> GetListenerTypeAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListenerTypeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Listener> GetListeners(this ILemonSqueezyAPI operations)
            {
                return operations.GetListenersAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Listener>> GetListenersAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListenersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Listener EditListener(this ILemonSqueezyAPI operations, Listener body = default(Listener))
            {
                return operations.EditListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Listener> EditListenerAsync(this ILemonSqueezyAPI operations, Listener body = default(Listener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Listener GetListener(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetListenerAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Listener> GetListenerAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListenerWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteListener(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteListenerAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteListenerAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteListenerWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static HttpListener GetHttpListener(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetHttpListenerAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpListener> GetHttpListenerAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHttpListenerWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HttpListener CreateHttpListener(this ILemonSqueezyAPI operations, HttpListener body = default(HttpListener))
            {
                return operations.CreateHttpListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpListener> CreateHttpListenerAsync(this ILemonSqueezyAPI operations, HttpListener body = default(HttpListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateHttpListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HttpListener EditHttpListener(this ILemonSqueezyAPI operations, HttpListener body = default(HttpListener))
            {
                return operations.EditHttpListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpListener> EditHttpListenerAsync(this ILemonSqueezyAPI operations, HttpListener body = default(HttpListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditHttpListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static BridgeListener GetBridgeListener(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetBridgeListenerAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BridgeListener> GetBridgeListenerAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBridgeListenerWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static BridgeListener CreateBridgeListener(this ILemonSqueezyAPI operations, BridgeListener body = default(BridgeListener))
            {
                return operations.CreateBridgeListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BridgeListener> CreateBridgeListenerAsync(this ILemonSqueezyAPI operations, BridgeListener body = default(BridgeListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateBridgeListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static BridgeListener EditBridgeListener(this ILemonSqueezyAPI operations, BridgeListener body = default(BridgeListener))
            {
                return operations.EditBridgeListenerAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BridgeListener> EditBridgeListenerAsync(this ILemonSqueezyAPI operations, BridgeListener body = default(BridgeListener), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditBridgeListenerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<HostedFile> GetHostedFiles(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetHostedFilesAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HostedFile>> GetHostedFilesAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostedFilesWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HostedFile CreateHostedFile(this ILemonSqueezyAPI operations, int id, HostedFile body = default(HostedFile))
            {
                return operations.CreateHostedFileAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostedFile> CreateHostedFileAsync(this ILemonSqueezyAPI operations, int id, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateHostedFileWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HostedFile EditHostedFile(this ILemonSqueezyAPI operations, int id, HostedFile body = default(HostedFile))
            {
                return operations.EditHostedFileAsync(id, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostedFile> EditHostedFileAsync(this ILemonSqueezyAPI operations, int id, HostedFile body = default(HostedFile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditHostedFileWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            public static HostedFile GetHostedFile(this ILemonSqueezyAPI operations, int id, int hfid)
            {
                return operations.GetHostedFileAsync(id, hfid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostedFile> GetHostedFileAsync(this ILemonSqueezyAPI operations, int id, int hfid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostedFileWithHttpMessagesAsync(id, hfid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            public static void DeleteHostedFile(this ILemonSqueezyAPI operations, int id, int hfid)
            {
                operations.DeleteHostedFileAsync(id, hfid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='hfid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHostedFileAsync(this ILemonSqueezyAPI operations, int id, int hfid, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteHostedFileWithHttpMessagesAsync(id, hfid, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Profile> GetProfiles(this ILemonSqueezyAPI operations)
            {
                return operations.GetProfilesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Profile>> GetProfilesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfilesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Profile CreateProfile(this ILemonSqueezyAPI operations, Profile body = default(Profile))
            {
                return operations.CreateProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> CreateProfileAsync(this ILemonSqueezyAPI operations, Profile body = default(Profile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Profile EditProfile(this ILemonSqueezyAPI operations, Profile body = default(Profile))
            {
                return operations.EditProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> EditProfileAsync(this ILemonSqueezyAPI operations, Profile body = default(Profile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Profile GetProfile(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetProfileAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> GetProfileAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteProfile(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteProfileAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProfileAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProfileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<HttpProfile> GetHttpProfiles(this ILemonSqueezyAPI operations)
            {
                return operations.GetHttpProfilesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HttpProfile>> GetHttpProfilesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHttpProfilesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static HttpProfile CreateHttpProfile(this ILemonSqueezyAPI operations, HttpProfile body = default(HttpProfile))
            {
                return operations.CreateHttpProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpProfile> CreateHttpProfileAsync(this ILemonSqueezyAPI operations, HttpProfile body = default(HttpProfile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateHttpProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Profile EditHttpProfile(this ILemonSqueezyAPI operations, HttpProfile body = default(HttpProfile))
            {
                return operations.EditHttpProfileAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Profile> EditHttpProfileAsync(this ILemonSqueezyAPI operations, HttpProfile body = default(HttpProfile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditHttpProfileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static HttpProfile GetHttpProfile(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetHttpProfileAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HttpProfile> GetHttpProfileAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHttpProfileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteHttpProfile(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteHttpProfileAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteHttpProfileAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteHttpProfileWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ReferenceAssembly> GetReferenceAssemblies(this ILemonSqueezyAPI operations)
            {
                return operations.GetReferenceAssembliesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ReferenceAssembly>> GetReferenceAssembliesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferenceAssembliesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ReferenceAssembly CreateReferenceAssembly(this ILemonSqueezyAPI operations, ReferenceAssembly body = default(ReferenceAssembly))
            {
                return operations.CreateReferenceAssemblyAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceAssembly> CreateReferenceAssemblyAsync(this ILemonSqueezyAPI operations, ReferenceAssembly body = default(ReferenceAssembly), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateReferenceAssemblyWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ReferenceAssembly EditReferenceAssembly(this ILemonSqueezyAPI operations, ReferenceAssembly body = default(ReferenceAssembly))
            {
                return operations.EditReferenceAssemblyAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceAssembly> EditReferenceAssemblyAsync(this ILemonSqueezyAPI operations, ReferenceAssembly body = default(ReferenceAssembly), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditReferenceAssemblyWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ReferenceAssembly GetReferenceAssembly(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetReferenceAssemblyAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceAssembly> GetReferenceAssemblyAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferenceAssemblyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteReferenceAssembly(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteReferenceAssemblyAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReferenceAssemblyAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReferenceAssemblyWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ReferenceSourceLibrary> GetReferenceSourceLibraries(this ILemonSqueezyAPI operations)
            {
                return operations.GetReferenceSourceLibrariesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ReferenceSourceLibrary>> GetReferenceSourceLibrariesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferenceSourceLibrariesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ReferenceSourceLibrary CreateReferenceSourceLibrary(this ILemonSqueezyAPI operations, ReferenceSourceLibrary body = default(ReferenceSourceLibrary))
            {
                return operations.CreateReferenceSourceLibraryAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSourceLibrary> CreateReferenceSourceLibraryAsync(this ILemonSqueezyAPI operations, ReferenceSourceLibrary body = default(ReferenceSourceLibrary), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateReferenceSourceLibraryWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ReferenceSourceLibrary EditReferenceSourceLibrary(this ILemonSqueezyAPI operations, ReferenceSourceLibrary body = default(ReferenceSourceLibrary))
            {
                return operations.EditReferenceSourceLibraryAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSourceLibrary> EditReferenceSourceLibraryAsync(this ILemonSqueezyAPI operations, ReferenceSourceLibrary body = default(ReferenceSourceLibrary), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditReferenceSourceLibraryWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static ReferenceSourceLibrary GetReferenceSourceLibrary(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetReferenceSourceLibraryAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReferenceSourceLibrary> GetReferenceSourceLibraryAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReferenceSourceLibraryWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteReferenceSourceLibrary(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteReferenceSourceLibraryAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteReferenceSourceLibraryAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteReferenceSourceLibraryWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Theme> GetThemes(this ILemonSqueezyAPI operations)
            {
                return operations.GetThemesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Theme>> GetThemesAsync(this ILemonSqueezyAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThemesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Theme CreateTheme(this ILemonSqueezyAPI operations, Theme body = default(Theme))
            {
                return operations.CreateThemeAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Theme> CreateThemeAsync(this ILemonSqueezyAPI operations, Theme body = default(Theme), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateThemeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static Theme EditTheme(this ILemonSqueezyAPI operations, Theme body = default(Theme))
            {
                return operations.EditThemeAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Theme> EditThemeAsync(this ILemonSqueezyAPI operations, Theme body = default(Theme), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditThemeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Theme GetTheme(this ILemonSqueezyAPI operations, int id)
            {
                return operations.GetThemeAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Theme> GetThemeAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetThemeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteTheme(this ILemonSqueezyAPI operations, int id)
            {
                operations.DeleteThemeAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteThemeAsync(this ILemonSqueezyAPI operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteThemeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
